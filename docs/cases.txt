Case 1: Instrument Data Retrieval with Schema Mapping

Requirements:
1. User input:
   - Instrument identifier (e.g., ticker symbol, ISIN, etc.) <- Done
   - Instrument schema (from front-end trading application) <- Done
   - Schema contains instrument attributes as described by front-end application <- Done
2. Output:
   - Corresponding instrument data in the requested schema format <- Currently outputs database format

Components:
1. Input Handler
   - Accept instrument identifier and schema
   - Validate input format and required fields
   - Support multiple identifier types (ticker, ISIN, etc.)

2. Schema Mapping System
   - Configuration-based mapping mechanism
   - Support for multiple front-end schema formats
   - Easy reconfiguration without code changes
   - Mapping rules storage (e.g., JSON/YAML configuration files)

3. Data Retrieval Service
   - Connect to data sources
   - Fetch instrument data
   - Transform data according to mapping rules
   - Handle error cases and missing data

4. Response Formatter
   - Format data according to requested schema
   - Support different output formats (JSON, XML, etc.)
   - Include metadata and error information


Implementation Approach:
1. Create a configuration system for schema mappings
2. Implement a flexible mapping engine
3. Build REST API endpoints for:
   - Schema submission
   - Data retrieval
   - Mapping configuration management
4. Add validation and error handling
5. Implement caching for frequently accessed mappings
6. Add logging and monitoring

Technical Considerations:
- Use dependency injection for flexible data source integration
- Implement caching for performance optimization
- Add comprehensive error handling and logging
- Support versioning for schema changes
- Consider security aspects (authentication, rate limiting)
- Add documentation for mapping configuration
- ORM

Next Steps:
1. Define schema mapping configuration format
2. Design API endpoints
3. Create proof of concept for mapping engine
4. Implement core functionality
5. Add testing and validation
6. Document configuration process
7. Redesign backend with ORM
8. Add authentication handling in API
9. Prevent SQL injections
10.