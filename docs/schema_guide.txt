Schema Guide for Market Data API
=============================

What is a Schema?
----------------
A schema defines how you want to receive instrument data. It maps database fields to your desired output format using YAML.

Schema Structure
--------------
```yaml
version: "1.0"
name: "my_schema"
description: "Custom equity schema"
extends: "base"    # Inherit from base schema
fields:
  - name: "security_id"    # Your chosen output name
    source: "isin"         # Must match database field
    type: "string"
    required: true
    description: "Security identifier"
    transformation: null    # Optional transformation

  - name: "price"
    source: "price_multiplier"
    type: "number"
    required: false
    description: "Price data"
    transformation: "round(4)"
```

Schema Management
---------------
1. Create a new schema:
```bash
curl -X POST http://localhost:5000/api/schema \
  -H "Content-Type: application/x-yaml" \
  --data-binary "@my_schema.yaml"
```

2. Update existing schema:
```bash
curl -X PUT http://localhost:5000/api/schema/my_schema \
  -H "Content-Type: application/json" \
  -d '{
    "name": "my_schema",
    "description": "Updated schema",
    "extends": "base",
    "fields": [...]
  }'
```

3. Check versions:
```bash
curl http://localhost:5000/api/schema/my_schema/versions
```

4. Delete schema:
```bash
curl -X DELETE http://localhost:5000/api/schema/my_schema
```

Available Database Fields
----------------------
Base Instrument fields (source: field):
- isin: ISIN identifier
- full_name: Full instrument name
- short_name: Short name/symbol
- currency: Trading currency
- cfi_code: CFI classification
- trading_venue: Trading venue ID

Equity-specific fields:
- price_multiplier: Price multiplier
- market_cap: Market capitalization
- shares_outstanding: Shares outstanding

Supported Transformations
-----------------------
- round(n): Round numbers to n decimals
- format(pattern): Format dates (YYYY-MM-DD)
- upper: Convert to uppercase
- lower: Convert to lowercase

Version Control
-------------
- Each schema starts at version 1.0
- Updates increment minor version (1.0 -> 1.1)
- Version history is preserved
- Each version can be retrieved

Tips & Best Practices
-------------------
1. Always extend from "base" schema
2. Source fields must match database model
3. Output names (name:) can be customized
4. Use transformations for formatting
5. Include proper descriptions
6. Mark required fields appropriately