"""initial_unified_schema

Revision ID: 34a28fc2e575
Revises: 
Create Date: 2025-08-07 22:48:37.209106

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '34a28fc2e575'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
# ### commands auto generated by Alembic - please adjust! ###
    op.create_table('legal_entities',
    sa.Column('lei', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('jurisdiction', sa.String(length=5), nullable=False),
    sa.Column('legal_form', sa.String(length=255), nullable=False),
    sa.Column('registered_as', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('bic', sa.String(length=11), nullable=True),
    sa.Column('next_renewal_date', sa.DateTime(), nullable=True),
    sa.Column('registration_status', sa.String(length=20), nullable=False),
    sa.Column('managing_lou', sa.String(length=20), nullable=False),
    sa.Column('creation_date', sa.DateTime(), nullable=False),
    sa.CheckConstraint('status IN ("ACTIVE", "INACTIVE", "PENDING")', name='ck_status_values'),
    sa.PrimaryKeyConstraint('lei')
    )
    op.create_index('idx_lei_status', 'legal_entities', ['lei', 'status'], unique=False)
    op.create_table('entity_addresses',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('lei', sa.String(length=20), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('address_lines', sa.String(length=500), nullable=True),
    sa.Column('country', sa.String(length=5), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('region', sa.String(length=100), nullable=True),
    sa.Column('postal_code', sa.String(length=20), nullable=False),
    sa.ForeignKeyConstraint(['lei'], ['legal_entities.lei'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('entity_registrations',
    sa.Column('lei', sa.String(length=20), nullable=False),
    sa.Column('initial_date', sa.DateTime(), nullable=True),
    sa.Column('last_update', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('next_renewal', sa.DateTime(), nullable=True),
    sa.Column('managing_lou', sa.String(length=20), nullable=True),
    sa.Column('validation_sources', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['lei'], ['legal_entities.lei'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('lei')
    )
    op.create_table('entity_relationship_exceptions',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('lei', sa.String(length=20), nullable=False),
    sa.Column('exception_type', sa.String(length=30), nullable=False),
    sa.Column('exception_reason', sa.String(length=500), nullable=False),
    sa.Column('exception_category', sa.String(length=50), nullable=False),
    sa.Column('provided_parent_lei', sa.String(length=20), nullable=True),
    sa.Column('provided_parent_name', sa.String(length=255), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=False),
    sa.CheckConstraint("exception_type IN ('DIRECT_PARENT', 'ULTIMATE_PARENT')", name='ck_exception_type_values'),
    sa.ForeignKeyConstraint(['lei'], ['legal_entities.lei'], ondelete='NO ACTION'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_lei_exception_type', 'entity_relationship_exceptions', ['lei', 'exception_type'], unique=True)
    op.create_table('entity_relationships',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('parent_lei', sa.String(length=20), nullable=False),
    sa.Column('child_lei', sa.String(length=20), nullable=False),
    sa.Column('relationship_type', sa.String(length=20), nullable=False),
    sa.Column('relationship_status', sa.String(length=20), nullable=False),
    sa.Column('relationship_period_start', sa.DateTime(), nullable=False),
    sa.Column('relationship_period_end', sa.DateTime(), nullable=True),
    sa.Column('percentage_of_ownership', sa.Integer(), nullable=True),
    sa.Column('qualification_method', sa.String(length=100), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=False),
    sa.CheckConstraint('relationship_type IN ("DIRECT", "ULTIMATE")', name='ck_relationship_type_values'),
    sa.ForeignKeyConstraint(['child_lei'], ['legal_entities.lei'], ondelete='NO ACTION'),
    sa.ForeignKeyConstraint(['parent_lei'], ['legal_entities.lei'], ondelete='NO ACTION'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_parent_child', 'entity_relationships', ['parent_lei', 'child_lei', 'relationship_type'], unique=True)
    op.create_table('instruments',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('isin', sa.String(length=12), nullable=False),
    sa.Column('instrument_type', sa.String(length=50), nullable=False),
    sa.Column('full_name', sa.String(length=500), nullable=True),
    sa.Column('short_name', sa.String(length=200), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('cfi_code', sa.String(length=6), nullable=True),
    sa.Column('lei_id', sa.String(length=20), nullable=True),
    sa.Column('firds_data', sa.JSON(), nullable=True),
    sa.Column('processed_attributes', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['lei_id'], ['legal_entities.lei'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('isin')
    )
    op.create_index('idx_instruments_unified_created', 'instruments', ['created_at'], unique=False)
    op.create_index('idx_instruments_unified_isin', 'instruments', ['isin'], unique=False)
    op.create_index('idx_instruments_unified_lei', 'instruments', ['lei_id'], unique=False)
    op.create_index('idx_instruments_unified_type', 'instruments', ['instrument_type'], unique=False)
    op.create_table('figi_mappings',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('isin', sa.String(length=12), nullable=False),
    sa.Column('figi', sa.String(length=12), nullable=True),
    sa.Column('composite_figi', sa.String(length=12), nullable=True),
    sa.Column('share_class_figi', sa.String(length=12), nullable=True),
    sa.Column('ticker', sa.String(length=20), nullable=True),
    sa.Column('security_type', sa.String(length=50), nullable=True),
    sa.Column('market_sector', sa.String(length=50), nullable=True),
    sa.Column('security_description', sa.String(length=255), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['isin'], ['instruments.isin'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('isin')
    )
    op.create_table('trading_venues',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('instrument_id', sa.String(length=36), nullable=False),
    sa.Column('venue_id', sa.String(length=100), nullable=False),
    sa.Column('isin', sa.String(length=12), nullable=False),
    sa.Column('first_trade_date', sa.DateTime(), nullable=True),
    sa.Column('termination_date', sa.DateTime(), nullable=True),
    sa.Column('admission_approval_date', sa.DateTime(), nullable=True),
    sa.Column('request_for_admission_date', sa.DateTime(), nullable=True),
    sa.Column('venue_full_name', sa.String(length=500), nullable=True),
    sa.Column('venue_short_name', sa.String(length=200), nullable=True),
    sa.Column('classification_type', sa.String(length=100), nullable=True),
    sa.Column('venue_currency', sa.String(length=3), nullable=True),
    sa.Column('issuer_requested', sa.String(length=100), nullable=True),
    sa.Column('competent_authority', sa.String(length=100), nullable=True),
    sa.Column('relevant_trading_venue', sa.String(length=100), nullable=True),
    sa.Column('publication_from_date', sa.DateTime(), nullable=True),
    sa.Column('venue_attributes', sa.JSON(), nullable=True),
    sa.Column('original_firds_record', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['instrument_id'], ['instruments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_trading_venues_unified_dates', 'trading_venues', ['first_trade_date', 'termination_date'], unique=False)
    op.create_index('idx_trading_venues_unified_instrument_id', 'trading_venues', ['instrument_id'], unique=False)
    op.create_index('idx_trading_venues_unified_isin', 'trading_venues', ['isin'], unique=False)
    op.create_index('idx_trading_venues_unified_isin_venue', 'trading_venues', ['isin', 'venue_id'], unique=False)
    op.create_index('idx_trading_venues_unified_venue_id', 'trading_venues', ['venue_id'], unique=False)
    op.create_table('transparency_calculations',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('tech_record_id', sa.Integer(), nullable=True),
    sa.Column('isin', sa.String(), nullable=False),
    sa.Column('calculation_type', sa.String(), nullable=False),
    sa.Column('from_date', sa.Date(), nullable=True),
    sa.Column('to_date', sa.Date(), nullable=True),
    sa.Column('liquidity', sa.Boolean(), nullable=True),
    sa.Column('total_transactions_executed', sa.Integer(), nullable=True),
    sa.Column('total_volume_executed', sa.Float(), nullable=True),
    sa.Column('statistics', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['isin'], ['instruments.isin'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_transparency_dates', 'transparency_calculations', ['from_date', 'to_date'], unique=False)
    op.create_index('idx_transparency_isin', 'transparency_calculations', ['isin'], unique=False)
    op.create_index('idx_transparency_type', 'transparency_calculations', ['calculation_type'], unique=False)
    op.create_table('equity_transparency',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('financial_instrument_classification', sa.String(), nullable=True),
    sa.Column('methodology', sa.String(), nullable=True),
    sa.Column('average_daily_turnover', sa.Float(), nullable=True),
    sa.Column('large_in_scale', sa.Float(), nullable=True),
    sa.Column('average_daily_number_of_transactions', sa.Float(), nullable=True),
    sa.Column('secondary_id', sa.String(), nullable=True),
    sa.Column('average_daily_transactions_secondary', sa.Float(), nullable=True),
    sa.Column('average_transaction_value', sa.Float(), nullable=True),
    sa.Column('standard_market_size', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['transparency_calculations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('non_equity_transparency',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('criterion_name', sa.String(), nullable=True),
    sa.Column('criterion_value', sa.String(), nullable=True),
    sa.Column('financial_instrument_classification', sa.String(), nullable=True),
    sa.Column('pre_trade_large_in_scale_threshold', sa.Float(), nullable=True),
    sa.Column('post_trade_large_in_scale_threshold', sa.Float(), nullable=True),
    sa.Column('pre_trade_instrument_size_specific_threshold', sa.Float(), nullable=True),
    sa.Column('post_trade_instrument_size_specific_threshold', sa.Float(), nullable=True),
    sa.Column('criterion_name_secondary', sa.String(), nullable=True),
    sa.Column('criterion_value_secondary', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['transparency_calculations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('debt_transparency',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('bond_type', sa.String(), nullable=True),
    sa.Column('security_type', sa.String(), nullable=True),
    sa.Column('is_securitised_derivative', sa.Boolean(), nullable=True),
    sa.Column('is_corporate_bond', sa.Boolean(), nullable=True),
    sa.Column('is_liquid', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['non_equity_transparency.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('futures_transparency',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('criterion_name_3', sa.String(), nullable=True),
    sa.Column('criterion_value_3', sa.String(), nullable=True),
    sa.Column('criterion_name_4', sa.String(), nullable=True),
    sa.Column('criterion_value_4', sa.String(), nullable=True),
    sa.Column('criterion_name_5', sa.String(), nullable=True),
    sa.Column('criterion_value_5', sa.String(), nullable=True),
    sa.Column('criterion_name_6', sa.String(), nullable=True),
    sa.Column('criterion_value_6', sa.String(), nullable=True),
    sa.Column('criterion_name_7', sa.String(), nullable=True),
    sa.Column('criterion_value_7', sa.String(), nullable=True),
    sa.Column('pre_trade_large_in_scale_threshold_nb', sa.Float(), nullable=True),
    sa.Column('post_trade_large_in_scale_threshold_nb', sa.Float(), nullable=True),
    sa.Column('pre_trade_instrument_size_specific_threshold_nb', sa.Float(), nullable=True),
    sa.Column('post_trade_instrument_size_specific_threshold_nb', sa.Float(), nullable=True),
    sa.Column('is_stock_dividend_future', sa.Boolean(), nullable=True),
    sa.Column('underlying_isin', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['non_equity_transparency.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
# ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('futures_transparency')
    op.drop_table('debt_transparency')
    op.drop_table('non_equity_transparency')
    op.drop_table('equity_transparency')
    op.drop_index('idx_transparency_type', table_name='transparency_calculations')
    op.drop_index('idx_transparency_isin', table_name='transparency_calculations')
    op.drop_index('idx_transparency_dates', table_name='transparency_calculations')
    op.drop_table('transparency_calculations')
    op.drop_index('idx_trading_venues_unified_venue_id', table_name='trading_venues')
    op.drop_index('idx_trading_venues_unified_isin_venue', table_name='trading_venues')
    op.drop_index('idx_trading_venues_unified_isin', table_name='trading_venues')
    op.drop_index('idx_trading_venues_unified_instrument_id', table_name='trading_venues')
    op.drop_index('idx_trading_venues_unified_dates', table_name='trading_venues')
    op.drop_table('trading_venues')
    op.drop_table('figi_mappings')
    op.drop_index('idx_instruments_unified_type', table_name='instruments')
    op.drop_index('idx_instruments_unified_lei', table_name='instruments')
    op.drop_index('idx_instruments_unified_isin', table_name='instruments')
    op.drop_index('idx_instruments_unified_created', table_name='instruments')
    op.drop_table('instruments')
    op.drop_index('idx_parent_child', table_name='entity_relationships')
    op.drop_table('entity_relationships')
    op.drop_index('idx_lei_exception_type', table_name='entity_relationship_exceptions')
    op.drop_table('entity_relationship_exceptions')
    op.drop_table('entity_registrations')
    op.drop_table('entity_addresses')
    op.drop_index('idx_lei_status', table_name='legal_entities')
    op.drop_table('legal_entities')
    # ### end Alembic commands ###
